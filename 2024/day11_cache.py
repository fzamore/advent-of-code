from functools import cache
from common.ints import ints

input = open('day11.txt').read().rstrip()

def blinkSingleStone(stone: int) -> list[int]:
  if stone == 0:
    return [1]

  stoneString = str(stone)
  n = len(stoneString)
  if n % 2 == 0:
    return [int(stoneString[:(n // 2)]), int(stoneString[(n // 2):])]

  return [stone * 2024]

# I stole this approach from Reddit.
#
# Returns the number of stones generated by the given stone and the number
# of blinks. Heavily cached.
@cache
def count(stone: int, blinksRemaining: int) -> int:
    # If there are no more blinks, we only have a single stone.
    if blinksRemaining == 0: return 1

    # Otherwise, we sum the count of stones generated by blinking each stone.
    return sum([count(s, blinksRemaining - 1) for s in blinkSingleStone(stone)])

def part1() -> None:
    print(sum([count(s, 25) for s in ints(input)]))

def part2() -> None:
    print(sum([count(s, 75) for s in ints(input)]))

part2()
